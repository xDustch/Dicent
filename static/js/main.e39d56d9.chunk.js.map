{"version":3,"sources":["components/Dice.js","components/Control.js","components/Display.js","components/Dicent.js","App.js","serviceWorker.js","index.js"],"names":["Dice","react_default","a","createElement","className","onClick","this","props","click","style","backgroundColor","color","text","Component","Control","Display","fail","dmg","surge","range","block","initial_state","red","blue","yellow","green","brown","grey","black","Dicent","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","addDice","bind","assertThisInitialized","reset","_this$setState","side","Math","floor","random","console","log","dice","setState","defineProperty","components_Dice","components_Display","components_Control","App","document","title","src_components_Dicent","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e39d56d9.chunk.js","sourcesContent":["import React, {Component} from 'react'\r\nimport './Dicent.css'\r\n\r\nclass Dice extends Component{\r\n    \r\n    render(){\r\n        return(\r\n            <div className=\"Dice\" onClick={this.props.click} style={{ backgroundColor: this.props.color }}>\r\n                {this.props.text}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Dice;","import React, {Component} from 'react'\r\nimport './Dicent.css'\r\n\r\nclass Control extends Component{\r\n    render(){\r\n        return(\r\n            <div className=\"Control\" onClick={this.props.click}>\r\n                Reset\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Control;","import React, {Component} from 'react'\r\nimport './Dicent.css'\r\n\r\nclass Display extends Component{\r\n    render(){\r\n        return(\r\n          this.props.fail ?\r\n\r\n            <div className=\"Display\">\r\n                <h1><i className=\"fas fa-poo\"></i></h1>\r\n                <h1>MISS</h1>\r\n                <h1><i className=\"fas fa-skull\"></i></h1>\r\n            </div>\r\n\r\n            :\r\n\r\n            <div className=\"Display\">\r\n                <h1>{this.props.dmg} <i className=\"fas fa-heart\"></i></h1>\r\n                <h1>{this.props.surge} <i className=\"fas fa-bolt\"></i></h1>\r\n                <h1>{this.props.range} <i className=\"fas fa-bullseye\"></i></h1>\r\n                <h1>{this.props.block} <i className=\"fas fa-shield-alt\"></i></h1>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Display;","import React, {Component} from 'react'\r\nimport './Dicent.css'\r\n\r\nimport Dice from './Dice';\r\nimport Control from './Control';\r\nimport Display from './Display';\r\n\r\nimport dice from './dice.json';\r\n\r\nconst initial_state = {\r\n    //dice count\r\n    red: 0,\r\n    blue : 0,\r\n    yellow: 0,\r\n    green: 0,\r\n    brown: 0,\r\n    grey: 0,\r\n    black: 0,\r\n    //attack/block count\r\n    dmg: 0,\r\n    surge: 0,\r\n    range: 0,\r\n    block: 0,\r\n    //fail?\r\n    fail: false\r\n};\r\n\r\nclass Dicent extends Component{\r\n\r\n    constructor(props){\r\n        super(props)\r\n        this.state = initial_state;\r\n        this.addDice = this.addDice.bind(this);\r\n        this.reset = this.reset.bind(this);\r\n    }\r\n\r\n\r\n    addDice(color){//increments dice count of variable color\r\n        let side = Math.floor(Math.random() * 6);\r\n        console.log(color,side);\r\n        if(dice[color].side[side].dmg === \"F\"){\r\n            this.setState({fail: true})\r\n        }\r\n        this.setState({\r\n            [color]: this.state[color] + 1,\r\n            block: this.state.block + dice[color].side[side].block,\r\n            dmg: this.state.dmg + dice[color].side[side].dmg,\r\n            surge: this.state.surge + dice[color].side[side].surge,\r\n            range: this.state.range + dice[color].side[side].range, //use dice color and side rolled to get data from json\r\n        });\r\n    }\r\n    \r\n    reset(){//resets state\r\n        console.log(\"reset\")\r\n        this.setState(initial_state);\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"Dicent\">\r\n                <div className=\"dice-container\">\r\n                    <Dice click={this.addDice.bind(this,\"red\")} text={this.state.red} color=\"#D11D05\"/>\r\n                    <Dice click={this.addDice.bind(this,\"blue\")} text={this.state.blue} color=\"#1D1075\"/>\r\n                    <Dice click={this.addDice.bind(this,\"green\")} text={this.state.green} color=\"#1A5E25\"/>\r\n                    <Dice click={this.addDice.bind(this,\"yellow\")} text={this.state.yellow} color=\"#FB1\"/>\r\n                    <Dice click={this.addDice.bind(this,\"brown\")} text={this.state.brown} color=\"#7A2D15\"/>\r\n                    <Dice click={this.addDice.bind(this,\"grey\")} text={this.state.grey} color=\"#666\"/>\r\n                    <Dice click={this.addDice.bind(this,\"black\")} text={this.state.black} color=\"#011\"/>\r\n                </div>\r\n                <div className=\"display-container\">\r\n                    <Display dmg={this.state.dmg} surge={this.state.surge} range={this.state.range} block={this.state.block} fail={this.state.fail}/>\r\n                    <Control click={this.reset}/>\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Dicent;","import React, { Component } from 'react';\nimport './App.css';\n\nimport Dicent from './components/Dicent';\n\nclass App extends Component {\n  componentDidMount(){\n    document.title = \"Dicent\"\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Dicent/>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}